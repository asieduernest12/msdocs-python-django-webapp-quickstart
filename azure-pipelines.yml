# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- main
- dev

pool:
  vmImage: ubuntu-latest
strategy:
  matrix:
    # Python35:
    #   PYTHON_VERSION: '3.5'
    # Python36:
    #   PYTHON_VERSION: '3.6'
    Python39:
      PYTHON_VERSION: '3.9'
  maxParallel: 1

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(PYTHON_VERSION)'
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements.txt
    pip install unittest-xml-reporting
  displayName: 'Install prerequisites'

- script: |
    pushd '$(projectRoot)'
    make build-assets
    python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'
  condition: succeededOrFailed()

- task: DockerCompose@1
  inputs:
    containerregistrytype: 'Azure Container Registry'
    azureSubscription: 'Azure subscription 1(c72bfa58-4c29-4b94-9788-b65037744171)'
    azureContainerRegistry: '{"loginServer":"dcrops.azurecr.io", "id" : "/subscriptions/c72bfa58-4c29-4b94-9788-b65037744171/resourceGroups/msdocs-python-webapp-quickstart/providers/Microsoft.ContainerRegistry/registries/dcrops"}'
    dockerComposeFile: '**/compose.yml'
    action: 'Build services'
    includeSourceTags: true
    includeLatestTag: true
    projectName: django_container_demo
    
- task: DockerCompose@1
  inputs:
    containerregistrytype: 'Azure Container Registry'
    azureSubscription: 'Azure subscription 1(c72bfa58-4c29-4b94-9788-b65037744171)'
    azureContainerRegistry: '{"loginServer":"dcrops.azurecr.io", "id" : "/subscriptions/c72bfa58-4c29-4b94-9788-b65037744171/resourceGroups/msdocs-python-webapp-quickstart/providers/Microsoft.ContainerRegistry/registries/dcrops"}'
    dockerComposeFile: '**/compose.yml'
    action: 'Push services'
    includeSourceTags: true
    includeLatestTag: true
    projectName: django_container_demo